/* JCO Language EBNF Specification */

// start symbol
start 
  : ( useDb                     
    | getCollection              
    | getDictionary		
    | saveAs                     
    | filter                     
    | group                      
    | expand                     
    | joinOfCollections          
    | mergeCollections           
    | intersectCollections      
    | subtractCollections       
    | createFuzzyOperator	
    | createJavaScriptFunction	
    | spatialJoin                	
    | trajectoryMatching        
    )* EOF
  ;


//-------------------------------------------------

collectionReference 
  :
    ID 	
    ( AT ID )? 	
    ( AS ID )?
  ;
   

fieldRef 
  : 
    ( FIELD_NAME )+
  ;


value 
  : 
	  INT           
	| FLOAT         
	| APEX_VALUE    
	| QUOTED_VALUE  
	| BOOLEAN       
  ;
  

outputFieldSpec 
  :
    fieldRef					
    (	COLON ( value																															
		| fieldRef																														
		| objectStructure 
		|	COUNT 		LP fieldRef RP																			
		|	TO_STRING 	LP fieldRef RP																			
		|	TO_INT 		LP fieldRef RP																			
		|	TO_FLOAT 	LP fieldRef RP																			
		|	TO_BOOL 	LP fieldRef RP																			
		|	SERIALIZE 	LP fieldRef RP																			
		|	MEMBERSHIP_OF 	LP ID RP																						
		|	TRANSLATE 	LP fieldRef COMMA ID (COMMA BOOLEAN)?  RP		
          	)
     )?      
  ;
  

generateAction 
  :
    GENERATE									
	( objectStructure ( geometricOption	)?
	| geometricOption						
	)
  ;


objectStructure 
  :
    LBR 
      outputFieldSpec							
        ( COMMA outputFieldSpec )*
    RBR
  ;


geometricOption 
  :
	    KEEPING GEOMETRY	
	  | DROPPING GEOMETRY																						
	  | SETTING GEOMETRY 
	            ( POINT LP fieldRef COMMA fieldRef RP       
	            | AGGREGATE LP fieldRef RP
	            | fieldRef 																			
	            | TO_POLYLINE LP fieldRef RP											
	            )
  ;


caseClause 
  :
    CASE 								
        ( whereCase )+	      
	      othersSpecification 							
  ;


othersSpecification
  :    
     ( KEEP | DROP ) OTHERS 
  ;


// $<Cnd

whereCase 
  : 
    WHERE 
     	orCondition 				
     	( generateAction )?
	( fuzzyCheck )*
	( alphaCut )*
	( keepDropFuzzySets )?
  ;


andCondition 
  : 
    notCondition ( AND notCondition )*
  ;

orCondition 
  : 
    andCondition ( OR andCondition )*
  ;

notCondition 
  : 
    ( NOT )?  predicate 
  ;

predicate 
  :
	  expression ( comparator expression )?
	| withPredicate      																
	| withoutPredicate  														
	| ( WITHIN | KNOWN | UNKNOWN ) FUZZY SETS ID ( COMMA ID )*
	| ifFails										
	| OVERLAP LP RP												
	| INSIDE LP (LEFT | RIGHT) RP
	| HOWMEET LP (LEFT | RIGHT) RP									
  ;




withPredicate 
  :
    WITH ( ID | ARRAY )? 
    	fieldRef ( COMMA fieldRef )*
  ;


withoutPredicate 
  :
    WITHOUT fieldRef ( COMMA fieldRef )*
  ;


expression 
  : 
  	( ADD | SUB )? term ( (ADD | SUB) term )*
  ;


term 
  : 
  	factor ( (MUL | DIV) factor )*
  ;
  
  
factor 
  : 
	  	fieldRef											
	  | LP orCondition RP			   	
	  | INT														
	  | FLOAT													
	  | APEX_VALUE										
	  | QUOTED_VALUE									
	  | ID 														
	      (LP (functionParams)? RP 	)?
  ;
  

functionParams 
  : 
  	expression ( COMMA expression )*
  ;
  
  
comparator 
  : 
  	( EQ | NEQ | LT | GT | LE | GE )
  ;
 

numeric 
  : 
  	( ADD | SUB )? ( FLOAT | INT )				
  ;


fuzzyCheck 
	:	
		CHECK_FOR FUZZY SET ID					
			USING orCondition 					
	;	


alphaCut 
	:
		ALPHACUT numeric ON ID  		
	;


keepDropFuzzySets 
	:
			DROPPING ALL FUZZY SETS 				
		|	KEEPING ALL FUZZY SETS 					
		|	DROPPING FUZZY SETS ID ( COMMA ID )* 
		|	KEEPING FUZZY SETS ID ( COMMA ID )* 		
	;

	

addFields 
	:
		ADD_ST FIELDS
			nonFuzzyFunction AS fieldRef		
			( COMMA nonFuzzyFunction AS fieldRef )*	
	;


fuzzySetReference
	:	
			 ID ( AS ID )?															
		| RIGHT LP ID RP ( AS ID )?											
		| LEFT  LP ID RP ( AS ID )?											
		|	( INSIDE LP ( LEFT | RIGHT ) RP							
			|	OVERLAP LP RP			
			|	HOWMEET LP ( LEFT | RIGHT )	RP						
			) 
			AS ID																						
	;

nonFuzzyFunction 
  :
	    DISTANCE LP ID RP ( comparator numeric )?													
	  | AREA LP ID RP ( comparator numeric )?														
	  | ORIENTATION LP ( LEFT | RIGHT ) ( COMMA  ID COLON numeric )? RP 	
	  | INCLUDED LP ( LEFT | RIGHT ) RP																				
	  | MEET																																			
	  | INTERSECT																																
  ;
	

setKeepDropFuzzySets 
	:	
		  KEEP (ALL | LEFT | RIGHT) SOURCE FUZZY SETS			
		|	DROP SOURCE FUZZY SETS 															
	;




setFuzzySets 
	:	
		SET FUZZY SETS 
			( KEEP ( 	ALL ( RESOLVING WITH (AND | OR | FIRST | LAST) ) ?	
							| LEFT 																						 
							| RIGHT)																						 
			| (	(LEFT | RIGHT) 	( ALL 																							
													| ID ( AS ID)?														
													)
				|	INSIDE 	LP ( LEFT | RIGHT ) RP	AS ID					
				|	HOWMEET LP ( LEFT | RIGHT ) RP 	AS ID															
				|	OVERLAP LP RP										AS ID			
				)
				(	COMMA 
					(	(LEFT | RIGHT) 	( ALL 																							
														| ID ( AS ID)?														
														)
					|	INSIDE 	LP ( LEFT | RIGHT ) RP	AS ID					
					|	HOWMEET LP ( LEFT | RIGHT ) RP 	AS ID															
					|	OVERLAP LP RP										AS ID			
					)
				)+				
				( RESOLVING WITH ( AND | OR | FIRST | LAST ) ) ?	
			)
	;


addNewFuzzySets 
	:	
		ADD_ST NEW FUZZY SETS
			fuzzySetReference ( COMMA fuzzySetReference	)*
	;
	
		
ifFails 
	:	
		IFFAILS LP 
			orIffCondition COMMA numeric 					
		RP
	;


orIffCondition 
	:
		andIffCondition ( OR andIffCondition )*
	;

andIffCondition 
	:
		notIffCondition ( AND notIffCondition )*
	;	  


notIffCondition
	:	
    ( NOT )? predicate 
	;


	
// --------------- Basic operators -----------------

getCollection
  : 
  	GET COLLECTION 
	    (ID ( AT ID )? 												
	    | FROM WEB ( APEX_VALUE | QUOTED_VALUE ) )
    SC 
  ;
  
getDictionary
  : 
  	GET DICTIONARY 
	     ID AT ID AS ID									
    SC 
  ;
  


setIntermediateAs
  : 
  	SET INTERMEDIATE AS 
	    ID											
    SC
  ;


saveAs
  : 
  	SAVE AS 
	    ID ( AT ID )?				 
    SC
  ;


spatialJoin
  :
    SPATIAL JOIN OF COLLECTIONS
	    collectionReference COMMA collectionReference
	    ( ON nonFuzzyFunction )?
	    SET GEOMETRY ( INTERSECTION | RIGHT | LEFT | ALL ) 
      ( addFields )?
      ( setFuzzySets )?
			(	setKeepDropFuzzySets )?
      ( addNewFuzzySets )?
	    ( caseClause )?	    
      ( REMOVE DUPLICATES )?  
    SC   
  ;
  

joinOfCollections
  : 
  	JOIN OF COLLECTIONS
      collectionReference COMMA collectionReference	 
      ( addFields )?
      ( setFuzzySets )?
			(	setKeepDropFuzzySets )?
      ( addNewFuzzySets )?
      ( caseClause )?
      ( REMOVE DUPLICATES )?  
    SC   
  ;

  
filter 
  : 
  	FILTER 
       caseClause 							
      ( REMOVE DUPLICATES )?  
    SC
  ;
  

group 
  : 
  	GROUP 										 
      ( groupPartition)+
      othersSpecification
    SC
  ;


groupPartition 
  :
    PARTITION orCondition						
	    BY fieldRef 												
            ( COMMA fieldRef )*
      INTO fieldRef
      	(	DROP GROUPING FIELDS							)?
      ( ORDER BY	fieldRef   						
           			( VERSUS 									)?  
      		( COMMA fieldRef  							
                ( VERSUS 	)?  	
          )* 
			)?
	    ( generateAction )?
  ;


expand
  :
    EXPAND 			
      ( unpack )+
      othersSpecification 								
    SC
  ;


unpack 
  :
    UNPACK  orCondition
	    ARRAY fieldRef
	    TO fieldRef						
  ;

 
mergeCollections
  :
     MERGE COLLECTIONS 		
     		collectionReference  
		      ( COMMA collectionReference )+
		    ( REMOVE DUPLICATES  )?  
    SC
  ;
  

intersectCollections
  :
    INTERSECT COLLECTIONS 
    	collectionReference COMMA collectionReference					
    SC
  ;
  
  
subtractCollections
  :
    SUBTRACT COLLECTIONS 
			collectionReference COMMA collectionReference					
    SC
  ;
  
  
useDb
  :
    USE 
      DB (ID | APEX_VALUE)           
        (AS (ID | APEX_VALUE)        )? 
                                            

        ( COMMA DB (ID | APEX_VALUE)  
               ( AS (ID | APEX_VALUE)    )? 
                                             
        )*
	    ON 
	      ( DEFAULT SERVER 
	      | SERVER 
	        (ID | APEX_VALUE) 				 
	        ( (ID | APEX_VALUE)   )?
	      )
    SC
  ;  
  
  
trajectoryMatching 
  :
    TRAJECTORY MATCHING
      collectionReference COMMA collectionReference		 
      ( trajectoryPartition	 )+
      othersSpecification 					 
    SC
  ;  
  
  

trajectoryPartition 
  :
    PARTITION 
	    orCondition 				
	    ( partitionMatching	 		)+
  ;



parameter  
	:	
		ID TYPE ID			 
	;
partitionMatching  
  :
    MATCHING fieldRef
	    WRT fieldRef
	    THRESHOLD LP	ID  RP numeric					
      ( WHERE orCondition )?
	    INTO fieldRef 												
      ( ADDING fieldRef TO INPUT )?
	    ( MIN SIMILARITY numeric )?    
  ;
  




  
createJavaScriptFunction
	:
		CREATE_JF ID 																									
      PARAMETERS 	
				parameter 
				( COMMA parameter )*
			(	PRECONDITION jfOrCondition )?
			BODY 
			END_BODY		
		SC
	; 
	
	
createFuzzyOperator 
	:		
		CREATE_FO ID
			PARAMETERS 	parameter ( COMMA parameter )*
			( PRECONDITION jfOrCondition )?
			EVALUATE jfExpression 
			POLYLINE 	LB
									LP numeric COMMA numeric RP									
                  ( COMMA LP numeric COMMA numeric RP )*
								RB
		SC
	;  


 
jfOrCondition 
  : 
    jfAndCondition 
			( OR jfAndCondition )*
  ;

 
jfAndCondition 
  : 
    jfNotCondition 
    ( AND jfNotCondition )*
  ;


jfNotCondition 
  : 
    ( NOT )? 
    jsfPredicate  
  ;


jsfPredicate 
  :
     	jfExpression 
        ( comparator jfExpression )?
  ;


jfExpression 
  : 
  	(ADD | SUB)? jfTerm 
    ( (ADD | SUB) jfTerm )*
  ;


jfTerm 
  : 
  	jfFactor 									
    ( (MUL | DIV) jfFactor )*
  ;
  
  
jfFactor 
  : 
	  	LP jfOrCondition RP				 		
	  | INT																			
	  | FLOAT																	
	  | APEX_VALUE															
	  | QUOTED_VALUE														
	  | ID 
        (LP (jfFunctionParams)? RP )?
  ;
  

jfFunctionParams 
  : 
  	jfExpression ( COMMA jfExpression )*
  ;


  

// ************************************
// ***
// ***            SCANNER  
// ***
// ************************************

fragment LETTER : 'A'..'Z'|'a'..'z';
fragment DIGIT0 : '1'..'9';
fragment DIGIT  : '0'..'9';
fragment WS
  :   ( ' '           
      | '\t'
      | '\r'
      | '\n'
      )+ 
  ;



// boolean Operator
AND : 'AND';
OR  : 'OR';
NOT : 'NOT';

// keywords
ADDING				: 'ADDING';
ADD_ST   			: 'ADD';
AGGREGATE     : 'AGGREGATE';
ALL           : 'ALL';
ALPHACUT			:	'ALPHA-CUT';
AREA          : 'AREA';
ARRAY         : 'ARRAY';
AS            : 'AS';
BODY					:	'BODY'; 
BOOLEAN       : 'TRUE' | 'FALSE';
BY            : 'BY';
CASE          : 'CASE';
CHECK_FOR     : 'CHECK' WS 'FOR';
COLLECTION    : 'COLLECTION';
COLLECTIONS   : 'COLLECTIONS';
CREATE_FO			:	'CREATE' WS 'FUZZY' WS 'OPERATOR';
CREATE_JF			: 'CREATE' WS 'JAVASCRIPT' WS 'FUNCTION';
COUNT					: 'COUNT';
DB            : 'DB';
DEFAULT       : 'DEFAULT';
DICTIONARY		:	'DICTIONARY';
DIRECTION			:	'DIRECTION';
DISTANCE			:	'DISTANCE';
DROP          : 'DROP';
DROPPING      : 'DROPPING';
DUPLICATES    : 'DUPLICATES';
END_BODY			:	'END' WS 'BODY';
EXPAND        : 'EXPAND';
EVALUATE			:	'EVALUATE';
FIELDS				: 'FIELDS';
FILTER        : 'FILTER';
FIRST	        : 'FIRST';
FROM					: 'FROM';
FUZZY					: 'FUZZY';
GENERATE			:	'GENERATE';
GEOMETRY      : 'GEOMETRY';
GET           : 'GET';
GROUP         : 'GROUP';
GROUPING      : 'GROUPING';
HOWMEET				:	'HOW-MEET';
IFFAILS				: 'IF-FAILS';
INCLUDED      : 'INCLUDED';
INPUT		      : 'INPUT';
INSIDE				:	'INSIDE';
INTERMEDIATE  : 'INTERMEDIATE';
INTERSECT     : 'INTERSECT';
INTERSECTION  : 'INTERSECTION';
INTO          : 'INTO';
JOIN          : 'JOIN';
KEEP          : 'KEEP';
KEEPING       : 'KEEPING';
KNOWN					:	'KNOWN';
LAST          : 'LAST';
LEFT          : 'LEFT';
MATCHING      : 'MATCHING';
MEET          : 'MEET';
MEMBERSHIP_OF :	'MEMBERSHIP_OF';	
MERGE         : 'MERGE';
MIN           :	'MIN';
NEW           :	'NEW';
OF            : 'OF';
ON            : 'ON';
ORIENTATION   : 'ORIENTATION';
OTHERS        : 'OTHERS';
ORDER		  		: 'ORDER' | 'SORTED';
OVERLAP				:	'OVERLAP';
PARAMETERS		:	'PARAMETERS';
PARTITION     : 'PARTITION';
PERIMETER			:	'PERIMETER';
POINT         : 'POINT';
POLYLINE			:	'POLYLINE';
PRECONDITION	:	'PRECONDITION';
RESOLVING			:	'RESOLVING';
RIGHT         : 'RIGHT';
REMOVE        : 'REMOVE';
SAVE          : 'SAVE';
SERIALIZE			: 'SERIALIZE';
SERVER        : 'SERVER';
SET           : 'SET';
SETS          : 'SETS';
SETTING       : 'SETTING';
SIMILARITY    : 'SIMILARITY';
SOURCE        : 'SOURCE' ;
SPATIAL       : 'SPATIAL';
SUBTRACT      : 'SUBTRACT';
TO            : 'TO';
TO_BOOL				: 'TO_BOOL';
TO_FLOAT			: 'TO_FLOAT';
TO_INT				: 'TO_INT';
TO_POLYLINE   : 'TO_POLYLINE';
TO_STRING			: 'TO_STRING';
TRAJECTORY    : 'TRAJECTORY';
TRANSLATE     : 'TRANSLATE';
THRESHOLD     : 'THRESHOLD';
TYPE					:	'TYPE';
UNKNOWN				:	'UNKNOWN';
UNPACK        : 'UNPACK';
USE           : 'USE';
USING         : 'USING';
VERSUS        : 'DESC' | 'ASC';
WEB						: 'WEB';
WHERE         : 'WHERE';
WITH          : 'WITH';
WITHIN        : 'WITHIN';
WITHOUT       : 'WITHOUT';
WRT           : 'WRT';


INT: '0' | DIGIT0 DIGIT* ;
FLOAT: DIGIT0 DIGIT* DOT DIGIT+ | '0' DOT DIGIT+; 

ID: LETTER (LETTER | DIGIT | '_')*;

FIELD_NAME: ( DOT (LETTER | DIGIT | '_')+ ) 
            | DOT '"' (~('"') )* '"'
            | DOT '~geometry' 
            | DOT '~fuzzysets' 
            | '~geometry';


// puntuaction
AT    : '@';
EQ    : '=';
NEQ   : '!=';
LE    : '<=';
GE    : '>=';
LT    : '<';
GT    : '>';
DOT   : '.';
ADD   : '+';
SUB   : '-';
MUL   : '*';
DIV   : '\\';
COMMA : ',';
COLON : ':';
SC    : ';';
LP    : '(';
RP    :	')';
LB    : '[';
RB    : ']';
LBR   : '{';
RBR   : '}';
APEX  : '\'';
QUOTE : '"';
SLASH : '/';
TILDE : '~';



WHITE_SPACES 
  : WS ; 

APEX_VALUE
  :  '\'' (~('\'') )* '\'' ;

QUOTED_VALUE
  :  '"' (~('"') )* '"' ;
	
COMMENT
    :   '//' ~('\n'|'\r')* '\r'? '\n' 
    |   '/*' ( . )* '*/'
    ;


